{
	"info": {
		"_postman_id": "53147cc0-a42d-4799-ab2f-aa50d9d1f703",
		"name": "notes-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19278069"
	},
	"item": [
		{
			"name": "add note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code should 201\",()=>{\r",
							"    pm.response.to.have.status(201)\r",
							"})\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							" pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\")\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');\r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							" \r",
							"    pm.expect(data).to.ownProperty('noteId');\r",
							"    pm.expect(data.noteId).to.not.equals('');\r",
							"\r",
							"   \r",
							"    pm.environment.set(\"noteId\", data.noteId);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari catatan A\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://18.142.227.181:5000/notes",
					"protocol": "http",
					"host": [
						"18",
						"142",
						"227",
						"181"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"should return status code 200\",()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type should set to applicatioin/json\",()=>{\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\")\r",
							"});\r",
							"\r",
							"pm.test(\"response body should be an object\",()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"response body should have the correct property and value\",()=>{\r",
							"    const res = pm.response.json();\r",
							"\r",
							"    pm.expect(res).to.have.ownProperty(\"status\");\r",
							"    pm.expect(res.status).to.equals(\"success\");\r",
							"    pm.expect(res).to.have.ownProperty(\"data\");\r",
							"    pm.expect(res.data).to.be.an(\"object\");\r",
							"    \r",
							"})\r",
							"\r",
							"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   const { data } = responseJson;\r",
							" \r",
							"   pm.expect(data).to.have.ownProperty('notes');\r",
							"   pm.expect(data.notes).to.be.an('array');\r",
							"   pm.expect(data.notes).lengthOf.at.least(1);\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://18.142.227.181:5000/notes",
					"protocol": "http",
					"host": [
						"18",
						"142",
						"227",
						"181"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Note By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"should return status code 200\",()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type should set to applicatioin/json\",()=>{\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\")\r",
							"});\r",
							"\r",
							"pm.test(\"response body should be an object\",()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"response body should have the correct property and value\",()=>{\r",
							"    const res = pm.response.json();\r",
							"\r",
							"    pm.expect(res).to.have.ownProperty(\"status\");\r",
							"    pm.expect(res.status).to.equals(\"success\");\r",
							"    pm.expect(res).to.have.ownProperty(\"data\");\r",
							"    pm.expect(res.data).to.be.an(\"object\");\r",
							"    \r",
							"})\r",
							"\r",
							"pm.test(\"response should have property note type object in data\",()=>{\r",
							"    const {data} = pm.response.json();\r",
							"\r",
							"    pm.expect(data).to.have.ownProperty(\"note\");\r",
							"    pm.expect(data.note).to.be.an(\"object\");\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"pm.test('note object should contain correct value for id, title, body, and tags property', () => {\r",
							"   const responseJson = pm.response.json();\r",
							"   const { data: { note } } = responseJson;\r",
							"   const expectedId = pm.environment.get('noteId');\r",
							"   const expectedTitle = 'Catatan A';\r",
							"   const expectedTags = ['Android', 'Web'];\r",
							"   const expectedBody = 'Isi dari catatan A';\r",
							"   pm.expect(note).to.have.ownProperty('id');\r",
							"   pm.expect(note.id).to.equals(expectedId);\r",
							"\r",
							"   pm.expect(note).to.have.ownProperty('title');\r",
							"   pm.expect(note.title).to.equals(expectedTitle);\r",
							"\r",
							"   pm.expect(note).to.have.ownProperty('tags');\r",
							"   pm.expect(note.tags).to.eql(expectedTags);\r",
							"\r",
							"   pm.expect(note).to.have.ownProperty('body');\r",
							"   pm.expect(note.body).to.equals(expectedBody);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://18.142.227.181:5000/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"18",
						"142",
						"227",
						"181"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"should return status code 200\",()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type should set to applicatioin/json\",()=>{\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\")\r",
							"});\r",
							"\r",
							"pm.test(\"response body should be an object\",()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"response body should have the correct property and value\",()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('message');\r",
							"   pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');\r",
							"    \r",
							"})\r",
							"\r",
							"pm.test(\"when request updated note\",()=>{\r",
							"    const id = pm.environment.get(\"noteId\");\r",
							"\r",
							"    pm.sendRequest(`http://18.142.227.181:5000/notes/${id}`,(err,response)=>{\r",
							"        if(!err){\r",
							"            pm.test(\"then the updated note should contain updated properties\",()=>{\r",
							"                const responseJson = response.json();\r",
							"                const { data: { note } } = responseJson;\r",
							" \r",
							"                const expectedTitle = 'Catatan A revisi';\r",
							"                const expectedTags = ['Android', 'Web'];\r",
							"                const expectedBody = 'Isi dari catatan A revisi';\r",
							"\r",
							"                pm.expect(note.title).to.equals(expectedTitle);\r",
							"                pm.expect(note.tags).to.eql(expectedTags);\r",
							"                pm.expect(note.body).to.equals(expectedBody);\r",
							"            })\r",
							"        }\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A revisi\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari catatan A revisi\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://18.142.227.181:5000/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"18",
						"142",
						"227",
						"181"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"should return status code 200\",()=>{\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type should set to applicatioin/json\",()=>{\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\")\r",
							"});\r",
							"\r",
							"pm.test(\"response body should be an object\",()=>{\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"   const responseJson = pm.response.json();\r",
							" \r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"   pm.expect(responseJson).to.have.ownProperty('message');\r",
							"   pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');\r",
							"}); \r",
							"\r",
							"pm.test('when request the deleted note', () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        if(!error) {\r",
							"            pm.test('the deleted note should be not found', () => {\r",
							"                pm.expect(response.code).to.equals(404);\r",
							"                const responseJson = response.json();\r",
							"                pm.expect(responseJson.status).to.equals('fail');\r",
							"                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan');\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://18.142.227.181:5000/notes/{{noteId}}",
					"protocol": "http",
					"host": [
						"18",
						"142",
						"227",
						"181"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	]
}